{% extends 'base.vue.twig' %}

{% block title %}TwigVue component{% endblock %}

{% block body %}
    {{ vue_store('menuItems', [{text: 'SomeMenuText', href: '#testen', icon: 'mdi-view-dashboard'}]) }}
<div class="example-wrapper">
    <h1>Twig and Vue</h1>

    <p>
        This is an example project in which you can use Vue inside Twig and overcome the limitations of using slots.
    </p>

    <h3>Basic principle</h3>
    <p>
        In Vue you can use dynamic components to create a component at runtime. Such dynamic component can be a rather
        simple vue object, for example:
    </p>
    <p>
    <code v-pre>   {
        template: `&lt;div&gt;{ seconds } seconds have past since this page was loaded.&lt;/div&gt;`,
        delimiters: ['{', '}'],
        data: () => ({
            seconds: 0,
        }),
        mounted() {
            setInterval(() => { this.seconds++; }, 1000);
        },
    }</code>
    </p>
    <p>
        It is fairly easy to create such an object as javascript-variable and have twig-rendered content passed as
        template. For example you could put the following code inside your base.html.twig file:
    </p>
    <p>
    <code v-pre>   {{ '{% block javascripts %}' }}
        var vueObject = Object.assign({
            template: `&lt;div&gt;{{ '{{ block(\'body\') }}' }}&lt;/div&gt;`,
            delimiters: ['{', '}']
        }, typeof vue !== 'undefined' ? vue : {});
    {{ '{% endblock %}' }}</code>
    </p>
    <p>
        After this, your other twig files that extend this base file will have their body rendered as vue-template.
        Additionally, you can define a vue javascript object to be applied to the dynamic vue component:
    </p>
    <p>
    <code v-pre>   {{ '{% extends \'base.html.twig\' %}' }}
    {{ '{% block body %}' }}
        &lt;p&gt;
            { seconds } seconds have past since this page was loaded.
        &lt;/p&gt;
    {{ '{% endblock %}' }}
    {{ '{% block javascripts %}' }}
        window.vue = {
            data: () => ({
                seconds: 0,
            }),
            mounted() {
                setInterval(() => { this.seconds++; }, 1000);
            }
        };
    {{ '{% endblock %}' }}</code>
    </p>
    <p>
        From here you can do all kinds of things, while utilizing both Twig and Vue.
    </p>

    <h3>Caveats</h3>
    <ul>
        <li>
            Browser-compatibility: <br />
            Javascript used in your twig files is not compiled by webpack and there
            are many syntax restrictions depending on the browsers and versions
            you need to support. <br />
            It is therefore recommended to keep vue-complexity in your twig-files to
            a minimum. Try to move any complex behaviour to actual vue components
            and have your twig-files act as a bridge.
        </li>
        <li>
            No scoped styles: <br />
            You cannot create scoped styles like you can with actual vue components,
            but of course you can still include actual vue components that do have their
            scoped styles.
        </li>
        <li>
            Less IDE support: <br />
            When using vue and twig mixed together your IDe will probably be less capable
            of dealing with its content.
            <br />
            TIP: use .vue.twig instead of .html.twig extensions to improve IDE support.
        </li>
    </ul>


</div>
{% endblock %}
{% block script %}
    <script>
        let vue = {
            data: () => ({
                seconds: 0,
            }),
            mounted() {
                setInterval(() => { this.seconds++; }, 1000);
            },
            computed: {
                test() {
                    return this.$store.testdata.aga;
                },
                mounted() {
                    setInterval(() => { this.timer++; }, 1000);
                },
                currentTimeString() {
                    return new Date().toLocaleTimeString();
                }
            }
        };
    </script>
{% endblock %}